<?xml version="1.0"?>

<book xmlns="http://docbook.org/ns/docbook"
      xmlns:xlink="http://www.w3.org/1999/xlink">
	<info>
		<title>Experiment Player</title>
		<subtitle>A tool to analyze audiovisual experiment recordings and transcripts</subtitle>

		<author>
			<personname><firstname>Jens</firstname> <surname>Lammert</surname></personname>
			<email>jens.lammert@st.ovgu.de</email>
		</author>
		<copyright>
			<year>2012</year>
			<year>2013</year>
			<holder>Otto-von-Guericke Universit√§t Magdeburg</holder>
		</copyright>

		<abstract><para>
			The following document illustrates how to install, configure
			and use the Experiment Player to analyze experiments.
		</para></abstract>
		
		<address>
			<uri>
				<link xlink:href="https://github.com/rhaberkorn/experiment-player">https://github.com/rhaberkorn/experiment-player</link>
			</uri>
		</address><address>
			<uri>
				<link xlink:href="http://sourceforge.net/projects/exp-player/">http://sourceforge.net/projects/exp-player/</link>
			</uri>
		</address>
	</info>

	<chapter>
		<title>Installation</title>
		<section>
			<title>Windows</title>
			<para>
				To install the <productname>Experiment Player</productname> on a Windows-based operating system,
				the GTK+ 2 widget toolkit must first be downloaded and installed.
				A convenient GTK+ installer can be downloaded from the
				<link xlink:href="http://gtk-win.sourceforge.net/home/index.php/Main/Downloads">
				"GTK+ for Windows Runtime Environment Installer" project page</link>.
				It is only necessary to install the
				<link xlink:href="http://downloads.sourceforge.net/gtk-win/gtk2-runtime-2.24.10-2012-10-10-ash.exe?download">
				GTK+ runtime</link>.
				<link xlink:href="http://downloads.sourceforge.net/gtk-win/gtk2-themes-2009-09-07-ash.exe?download">
				Additional themes</link> may be installed as well - but the default GTK+ theme should be sufficient.
			</para><para>
				Precompiled Windows 32-bit binaries of the <productname>Experiment Player</productname> itself
				are available as ZIP archives from the
				<link xlink:href="http://sourceforge.net/projects/exp-player/files/bin/">Sourceforge project page</link>.
				The ZIP archive merely has to be extracted somewhere.
				Afterwards the included <filename>experiment-player.exe</filename> can be executed.
				All library dependencies except GTK+ are included in the ZIP archive.
			</para>
		</section>
		<section>
			<title>Linux</title>
			<para>
				To install the <productname>Experiment Player</productname> on a Linux-based operating system,
				it first has to be built from source.
				It can either be built from a local
				<link xlink:href="https://github.com/rhaberkorn/experiment-player">Git repository</link> clone,
				or from a source code package that can be downloaded from the
				<link xlink:href="http://sourceforge.net/projects/exp-player/files/src/">project's download archive
				on Sourceforge</link>.
				In either case, further build instructions are given in the included
				<filename>INSTALL</filename> file.
			</para>
		</section>
	</chapter>
	<chapter>
		<title>Graphical User Interface</title>
		<para>
			After startup there will be two windows, a <emphasis>player</emphasis>
			window and a <emphasis>data</emphasis> window.
			They are explained in the following sections.
		</para>
		<section>
			<title>Player Window</title>
			<screenshot>
				<!-- <title>Player Window after startup</title> -->
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/player-window-new.png"/>
					</imageobject>
					<caption>Player Window after startup</caption>
				</mediaobject>
			</screenshot>
			<para>
				The image above depicts the player window after startup.
				No experiment is yet opened in the application, so several
				controls are greyed out.
			</para><para>
				Experiments can be opened via the <guimenu>File</guimenu> menu
				or the <guimenu>Quick Open</guimenu> menu.
				The process of opening experiments via the <guimenu>Quick Open</guimenu> menu
				is explained later on.
				The remaining interface components are self-explanatory.
			</para>
		</section>
		<section>
			<title>Data Window</title>
			<screenshot>
				<!-- <title>Data Window after startup</title> -->
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/data-window-new.png"/>
					</imageobject>
					<caption>Data Window after startup</caption>
				</mediaobject>
			</screenshot>
			<para>
				The image above depicts the data window after startup.
				The data window is used to display additional information of an
				experiment.
				This information is time-dependant and synchronized with other
				time-dependant data, like the current video position.
				If the time is changed in one component, it changes in all the
				other ones as well.
			</para><para>
				The current implementation is able to display an experiment
				transcript (in the Transcript view area).
				The transcript view is divided up into a left part showing the
				proband's text contributions and a right part showing the
				wizard's text contributions.
				The different experiment phases are displayed hierachically
				in the Transcript navigation area.
				Transcripts can also be highlighted but this feature is
				explained later on.
			</para>
		</section>
	</chapter>
	<chapter>
		<title>Getting Started</title>
		<section>
			<title>How to load a file with Quick Open</title>
			<para>
				A video recording of an experiment and its related transcript file
				are considered as an experiment. A video is an AVI or MP4 file
				while transcript files are special XML applications.
				The experiment's files can be opened separately or by using the
				<emphasis>Quick Open</emphasis> feature.
			</para>
			<screenshot>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/quick-open-empty.png"/>
					</imageobject>
					<caption>Empty Quick Open menu</caption>
				</mediaobject>
			</screenshot>
			<para>
				<emphasis>Quick Open</emphasis> can be performed using the
				<guimenu>Quick Open</guimenu> menu.
				The menu has items for all experiments found in a selected
				directory.
				The directory may be selected using the <guimenuitem>Choose Directory...</guimenuitem>
				menu item.
				Experiment files with identical basenames (file name without extension) are
				listed as single menu items.
				For instance, if the directory contains two files <filename>20101117.xml</filename> and
				<filename>20101117.mp4</filename>, the menu will look like:
			</para>
			<screenshot>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/quick-open.png"/>
					</imageobject>
				</mediaobject>
			</screenshot>
			<para>
				When an experiment item is activated in the menu, the
				corresponding experiment files are loaded (replacing any
				already opened experiment).
				The configured location of the <emphasis>Quick Open</emphasis> directory
				persists after application restarts.
			</para>
		</section>
		<section>
			<title>Transcript Highlighting</title>
			<para>
				If the transcript is opened and a files was selected the transcript widget 
				shows the dialog between proband and wizard. The dialog monitor is divided 
				up into two seperate widgets so there can be different settings and fonts
				at each widget. Also it is possible to markup matches separate from each other.
				There two way to search matches: regular expressions and format files.
			</para>
			<section>
				<title>Regular Expressions</title>
				<para>
					For more information how to use regular expressions have a look at
					<link xlink:href="http://developer.gnome.org/glib/stable/glib-Perl-compatible-regular-expressions.html">glib documentation for Perl compatible regular expression</link>.
					Regular expressions are case-insensitive so both lower-case and upper-case character
					will match the same expression. Regular expression matches will be formated bold by default. 
					Captures are not be supported.
				</para>
			</section>
			<section>
				<title>Format Expression</title>
				<para>
					By default a search term will be regarded as regular expression. If the
					markup toggle is activated the input expression will be regarded as 
					format expression which is a combination of regular expression and Pango mark up. 
					That means if the regular expression matchs at the text the markup 
					expressions will apply.
					For more information refer to the <link xlink:href="http://developer.gnome.org/pango/stable/PangoMarkupFormat.html">Pango Markup documentation.</link>.
				</para>
			</section>
			<section>
				<title>Format Files</title>
				<para>
					Format files are collection of multiple format expressions. At first there
					has to be selected a quick open directory in menue Format entry Choose Directory. 
					After that all available format files in the selected directory will be listed
					under menue Formats. To create an own format file care the following:
					<itemizedlist mark='bullet'>
						<listitem>
							<para>Each line will regarded as a single mark up statement.
							</para>
						</listitem>
						<listitem>
							<para>Leading whitespace characters will be ignored.
							</para>
						</listitem>
						<listitem>
							<para>A line beginning with '<filename>#</filename>' will be ignored complete.
							</para>
						</listitem>
						<listitem>
							<para>Only whole lines can be ignored.
							</para>
						</listitem>
						<listitem>
							<para>The format file has to save as a FMT-file (<filename>*.fmt</filename>).
							</para>
						</listitem>
						<listitem>
							<para>Incorrect lines will cause an error message.
							</para>
						</listitem>
					</itemizedlist>
					Let be the whole text referring to a single time stamp a text fragment.
					For each text fragment each format expression in the format file will be 
					iterated and the associated regular expression will matched. 
					For each match all associated mark ups will apply cumulatively at the 
					matching text.
				</para>
			</section>
		</section>
	</chapter>
	<chapter>
		<title>Config File</title>
		<para>
			The config file is located in the users default directory where each config 
			files are. By editing the config-file default keys which can not changed via 
			gui can set. More details about the structure of the config file can be 
			found in the
			<link xlink:href="developer.gnome.org/glib/unstable/glib-Key-value-file-parser.html">glib documentation</link>.
			
			The following table shows all additional keys :
			
			<table border="1">
				<thead border="1">
					<tr>
						<td>Key</td>
						<td>Description</td>
					</tr>
				</thead>
				<tbody border="1">
					<tr>
						<td><filename>Default-Format-Font</filename></td>
						<td>For detailed information follow <link xlink:href="http://developer.gnome.org/pango/stable/pango-Fonts.html#pango-font-description-from-string">pango font description</link></td>
					</tr>
					<tr>
						<td><filename>Default-Format-Text-Color</filename></td>
						<td>An RGB color specification such as '#00FF00' or a color name such as 'red'</td>
					</tr>
					<tr>
						<td><filename>Default-Format-BG-Color</filename></td>
						<td>An RGB color specification such as '#00FF00' or a color name such as 'red'</td>
					</tr>
				</tbody>
			</table>
		</para>
	</chapter>
</book>
